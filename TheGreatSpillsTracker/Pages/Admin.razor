@page "/admin"
@using TheGreatSpillsTracker.Data
@using System.Security.Cryptography
@using System.Text
@using Microsoft.AspNetCore.SignalR.Client

@inject SpillDataService spillService
@inject NavigationManager NavigationManager
@inject IJSRuntime  JSRuntime
@inject IModalService Modal

<h2>Admin</h2>
<br />

<button @onclick="@(() => Modal.Show<InputPrompt>("Modal Popup Example"))" class="btn btn-primary">View </button>

@if (!authed)
{
    <div class="form-group">
        <label for="passwordInput">Enter password to make changes</label>
        <input type="password" class="form-text text-muted mb-4" id="passwordInput" aria-describedby="password" @bind="Password" />
        <button type="button" class="btn btn-primary" @onclick="VerifyAuthentication">Authenticate</button>
    </div>
}

@if (authed)
{
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h3>Spills at Work</h3>
                </div>
                <div class="card-body">
                    <p>Last Spill: @spillService.GetSpill().EnterpriseSpillStringNonUTC()</p>
                    <p>Number of Spills: @spillService.GetSpill().EnterpriseSpillCount</p>
                    <button type="button" class="btn btn-primary" @onclick="NewSpillWorkNow">Add Spill Now</button>
                    <button type="button" class="btn btn-primary" @onclick="resetWorkCount">Reset Spill Count</button>
                    <button type="button" class="btn btn-primary" @onclick="SetWorkBigSpill">Mark as Big Spill</button>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h3>Spills at Home</h3>
                </div>
                <div class="card-body">
                    <p>Last Spill: @spillService.GetSpill().HomeSpillStringNonUTC()</p>
                    <p>Number of Spills: @spillService.GetSpill().HomeSpillCount</p>
                    <button type="button" class="btn btn-primary" @onclick="NewSpillHomeNow">Add Spill Now</button>
                    <button type="button" class="btn btn-primary" @onclick="resetHomeCounter">Reset Spill Count</button>
                    <button type="button" class="btn btn-primary" @onclick="SetHomeBigSpill">Mark as Big Spill</button>
                </div>
            </div>
        </div>
    </div>

    <br />
    <button type="button" class="btn btn-primary" @onclick="DownloadSettings">Download Settings JSON</button>
}

@code {
    String Password = "";
    bool authed = false;

    HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/uHub"))
            .Build();

        await hubConnection.StartAsync();
    }

    Task SendUpdate() =>
        hubConnection.SendAsync("SendBroadcast");

    public async void DownloadSettings()
    {
        await JSRuntime.InvokeAsync<object>(
        "FileSaveAs",
        "SpillData.json",
        spillService.ReadInfoRaw()
        );
    }

    public void VerifyAuthentication()
    {
        if (spillService.GetSpill().PassHash == hash(Password))
        {
            authed = true;
            this.StateHasChanged();
        }
    }

    public void NewSpillHomeNow()
    {
        if (!authed)
        {
            return;
        }
        spillService.AddHomeSpill(DateTime.Now);
        PageUpdate();
    }

    public void NewSpillWorkNow()
    {
        if (!authed)
        {
            return;
        }
        spillService.AddEnterpriseSpill(DateTime.Now);
        PageUpdate();
    }

    public string hash(string str)
    {
        using (SHA1Managed sha1 = new SHA1Managed())
        {
            var hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(str));
            var sb = new StringBuilder(hash.Length * 2);

            foreach (byte b in hash)
            {
                sb.Append(b.ToString("X2"));
            }
            string hi = sb.ToString();
            return sb.ToString();
        }
    }

    public void resetHomeCounter()
    {
        if (!authed)
        {
            return;
        }
        spillService.ResetHomeCount();
        PageUpdate();
    }

    public void resetWorkCount()
    {
        if (!authed)
        {
            return;
        }
        spillService.ResetEnterpriseCount();
        PageUpdate();
    }

    public void SetHomeBigSpill()
    {
        if (!authed)
        {
            return;
        }
        spillService.AddRecordSpill("home");
        PageUpdate();
    }

    public void SetWorkBigSpill()
    {
        if (!authed)
        {
            return;
        }
        spillService.AddRecordSpill("work");
        PageUpdate();
    }

    public void PageUpdate()
    {
        SendUpdate();
        this.StateHasChanged();
    }
}