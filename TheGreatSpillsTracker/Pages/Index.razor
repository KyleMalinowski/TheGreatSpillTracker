@page "/"
@using TheGreatSpillsTracker.Data
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inject IJSRuntime jrt
@inject SpillDataService spillService

@functions {
    private GoogleMap map1;
    private MapOptions mapOptions;
     private Stack<Marker> markers = new Stack<Marker>();
        private List<String> _events = new List<String>();

}

<div class="jumbotron">
    <div class="container">
        <h1>The Great Spills Tracker</h1>
        <p>A simple app to keep track of time since Trent last spilled.</p>
    </div>
</div>
<body onresize="RebuildTimeCircles()">
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h3>Last Spill at Work</h3>
                </div>
                <div class="card-body">
                    <div class="EnterpriseTime" data-date="@spillService.GetSpill().EnterpriseSpillString()"></div>
                    <h3 class="badge badge-primary">Spill Count: @spillService.GetSpill().EnterpriseSpillCount</h3>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h3>Last Spill at Home</h3>
                </div>
                <div class="card-body">
                    <div class="HomeTime" data-date="@spillService.GetSpill().HomeSpillString()"></div>
                    <h3 class="badge badge-primary">Spill Count: @spillService.GetSpill().HomeSpillCount</h3>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h3>Last Record Spill</h3>
                </div>
                <div class="card-body">
                    <div class="RecordTime" data-date="@spillService.GetSpill().RecordSpillString()"></div>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h3>Location of Last Spill</h3>
                </div>
                <div class="card-body">
                    <GoogleMap @ref="@map1" Id="map1" Options="@mapOptions"></GoogleMap>
                </div>
            </div>
        </div>
    </div>
</body>

@code {

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await jrt.InvokeVoidAsync("InitTimeCircles");
            
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        spillService.Initialize();

        mapOptions = new MapOptions()
		{
			Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 13.505892,
                Lng = 100.8162
            },
			MapTypeId = MapTypeId.Roadmap
		};

    }

    private async Task AddMarker()
    {
        var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
        {
            Position = await map1.InteropObject.GetCenter(),
            Map = map1.InteropObject,
            Label = $"Test {markers.Count()}",
            
        });

        //await marker.SetMap(map1);

        //var map = await marker.GetMap();

        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        //if (map == map1.InteropObject)
        //{
        //    Console.WriteLine("Yess");
        //}
        //else
        //{
        //    Console.WriteLine("Nooo");
        //}

        markers.Push(marker);

        await marker.AddListener<MouseEvent>("click", e =>
        {
            _events.Add("click");
            StateHasChanged();

            e.Stop();
        });
    }
}

